#! /bin/bash

set -e

AVAILABLE_MODULES="server xfce gnome nvidia nvidia470 chrome firefox office gimp gaming japanese"
SELECTED_MODULES=" xfce chrome office "
DEB_ROOT="deb http://deb.debian.org/debian"
SOURCES_LIST="/etc/apt/sources.list"
SCRIPTS_PATH="/tmp/debian-install-scripts-main"

log() {
    echo "${@}"
    echo "${@}" >> /root/install.log
}

is_selected() {
    if [[ " ${SELECTED_MODULES}" == *" ${1} "* ]]; then
        return 0
    fi
    return 1
}

show_line() {
    if [[ "${HIGHLIGHTED}" == "${2}" ]]; then
        echo -ne '\e[7m'
    fi
    if [[ "${2}" != "done" ]]; then
        if is_selected "${2}"; then
            echo -ne '\033[1m'
            echo -n "+ "
        else
            echo -n "- "
        fi
    fi
    echo -n "${1}"
    echo -ne '\033[0m'
    if [[ "${2}" != "done" ]]; then
        echo
    fi
}

HIGHLIGHTED="done"
tput civis
while :; do
    clear
    echo "Selected features (use Up and Down arrows to navigate, Enter or Space to toggle):"
    echo
    echo "Environment:"
    show_line "Minimal server" "server"
    show_line "XFCE" "xfce"
    show_line "Gnome" "gnome"
    echo
    echo "NVIDIA driver series (see https://www.nvidia.com/download/index.aspx for compatibility)"
    echo "Proton experimental and recent Proton-GE will only work with 510+ drivers, but Proton "
    echo "7.0 and below as well as older versions of Proton-GE will work with the 470 drivers)"
    show_line "510+ (all 1000-series cards and newer, some 700- to 900-series cards)" "nvidia"
    show_line "470 (all 600-series cards and newer)" "nvidia470"
    echo "(For older cards the built-in open-source driver is better)"
    echo
    echo "Additional packages:"
    show_line "Google Chrome" "chrome"
    show_line "Firefox" "firefox"
    show_line "LibreOffice and some addons" "office"
    show_line "Gimp and some plugins" "gimp"
    show_line "Play Steam, Epic and GOG games, with tools and optimizations" "gaming"
    show_line "Japanese keyboard" "japanese"
    echo
    show_line "Selection done, install now" "done"
    read -srN1 KEY
    ACTION=""
    case "${KEY}" in
        ' '|$'\n')
            ACTION="Toggle"
            ;;
        $'\x1b')
            read -srN1 KEY
            if [[ "${KEY}" == "[" ]]; then
                read -srN1 KEY
                case "${KEY}" in
                    'A')
                        ACTION="Up"
                        ;;
                    'B')
                        ACTION="Down"
                        ;;
                esac
                # Flush out other sequences
                set +e
                read -srn4 -t .1
                set -e
            fi
            ;;
    esac
    NEW_HIGHLIGHTED=""
    case "${ACTION}" in
        Up)
            set +e
            NEW_HIGHLIGHTED="$(grep -Eo "\w+ ${HIGHLIGHTED} " <<< " ${AVAILABLE_MODULES} done ")"
            set -e
            if [[ -n "${NEW_HIGHLIGHTED}" ]]; then
                HIGHLIGHTED="$(echo "$(cut -d ' ' -f 1 <<< "${NEW_HIGHLIGHTED}")")"
            fi
            ;;
        Down)
            set +e
            NEW_HIGHLIGHTED="$(grep -Eo " ${HIGHLIGHTED} \w+" <<< " ${AVAILABLE_MODULES} done ")"
            set -e
            if [[ -n "${NEW_HIGHLIGHTED}" ]]; then
                HIGHLIGHTED="$(echo "$(cut -d ' ' -f 3 <<< "${NEW_HIGHLIGHTED}")")"
            fi
            ;;
        Toggle)
            case "${HIGHLIGHTED}" in
                done)
                    clear
                    break
                    ;;
                server)
                    SELECTED_MODULES=" server "
                    ;;
                xfce|gnome)
                    SELECTED_MODULES="${SELECTED_MODULES/ server }"
                    SELECTED_MODULES="${SELECTED_MODULES/ xfce }"
                    SELECTED_MODULES="${SELECTED_MODULES/ gnome }"
                    SELECTED_MODULES=" ${HIGHLIGHTED} ${SELECTED_MODULES}"
                    ;;
                nvidia|nvidia470)
                    if is_selected "${HIGHLIGHTED}"; then
                        SELECTED_MODULES="${SELECTED_MODULES/ ${HIGHLIGHTED} / }"
                    else
                        SELECTED_MODULES="${SELECTED_MODULES/ nvidia / }"
                        SELECTED_MODULES="${SELECTED_MODULES/ nvidia470 / }"
                        SELECTED_MODULES="${SELECTED_MODULES}${HIGHLIGHTED} "
                    fi
                    ;;
                *)
                    if is_selected "${HIGHLIGHTED}"; then
                        SELECTED_MODULES="${SELECTED_MODULES/ ${HIGHLIGHTED} / }"
                    else
                        SELECTED_MODULES="${SELECTED_MODULES}${HIGHLIGHTED} "
                    fi
                    ;;
            esac
            ;;
    esac
done

log "Selected modules:${SELECTED_MODULES}"

tput cnorm

PACKAGES="
    apt-transport-https
    bash-completion
    ca-certificates
    curl
    firmware-linux
    ntfs-3g exfatprogs f2fs-tools
    git
    gnupg
    lsb-release
    man
    powerline powerline-gitstatus
    python-is-python3
    sudo
    systemd-timesyncd
    tmux
    vim-addon-manager vim-nox
    wget
"

if is_selected "server"; then
    PACKAGES+="
        ifupdown
        openssh-server
    "
else
    PACKAGES+="
        libspa-0.2-bluetooth
        gvfs-backends gvfs-fuse
        unrar unzip
        fonts-noto
        wireplumber
        firmware-ath9k-htc
        firmware-atheros
        firmware-b43-installer
        firmware-b43legacy-installer
        firmware-bnx2
        firmware-bnx2x
        firmware-brcm80211
        firmware-cavium
        firmware-intel-sound
        firmware-iwlwifi
        firmware-libertas
        firmware-myricom
        firmware-netronome
        firmware-netxen
        firmware-qlogic
        firmware-realtek
        firmware-sof-signed
        firmware-ti-connectivity
        firmware-zd1211
    "
fi

if is_selected "xfce"; then
    PACKAGES+="
        xfce4
        elementary-xfce-icon-theme
        xfce4-whiskermenu-plugin
        xfce4-notifyd
        xfce4-power-manager
        network-manager-gnome
        blueman
        xfce4-terminal
        xfce4-screenshooter
        tumbler-plugins-extra
        thunar-archive-plugin
        ristretto
        mpv
        seahorse
        mousepad
        galculator
    "
fi

if is_selected "gnome"; then
    PACKAGES+="
        gnome-shell
        gnome-tweaks
        gnome-shell-extensions
        nautilus
        totem gstreamer1.0-vaapi
        eog
        gnome-screenshot
        gnome-calculator
        file-roller
        nautilus-extension-gnome-terminal
    "
fi

if is_selected "firefox"; then
    # TODO automatically add languages
    PACKAGES+="
        firefox-esr
    "
fi

if is_selected "japanese"; then
    PACKAGES+="
        fcitx5-mozc
    "
fi

if is_selected "office"; then
    # TODO automatically add more lightproof languages?
    PACKAGES+="
        libreoffice libreoffice-lightproof-en libreoffice-style-elementary
        gstreamer1.0-vaapi
    "
fi

if is_selected "gimp"; then
    PACKAGES+="
        gimp gimp-data-extras gimp-gmic gimp-lensfun gimp-plugin-registry gimp-texturize
    "
fi

if is_selected "nvidia"; then
    PACKAGES+="
        nvidia-tesla-driver
    "
fi

if is_selected "nvidia470"; then
    PACKAGES+="
        nvidia-tesla-470-driver
    "
fi

if [[ -n "$(lspci | grep VGA.*Intel)" ]]; then
    PACKAGES+="
        i965-va-driver-shaders
        intel-media-va-driver-non-free
    "
    echo i915 >> /etc/initramfs-tools/modules
fi

if is_selected "gaming"; then
    PACKAGES+="
        mangohud:amd64 mangohud:i386 protontricks steam
    "
    echo steam steam/license note "" | debconf-set-selections
    echo steam steam/question select "I AGREE" | debconf-set-selections
fi

echo "${DEB_ROOT} testing main contrib non-free" > "${SOURCES_LIST}"
echo "${DEB_ROOT}-security testing-security main contrib non-free" >> "${SOURCES_LIST}"
echo "${DEB_ROOT} testing-updates main contrib non-free" >> "${SOURCES_LIST}"
log "Apt sources:"
log "$(cat "${SOURCES_LIST}")"

if is_selected "gaming"; then
    log "Adding i386 multilib"
    dpkg --add-architecture i386
fi
log "Updating apt package index"
apt update

log "Cleaning up base install"
apt-mark auto $(apt list --manual-installed 2>/dev/null | tail -n +2 | cut -d '/' -f 1)
apt autoremove -y

log "Upgrading base install"
apt install -y --reinstall $(apt list --upgradable 2>/dev/null | tail -n +2 | cut -d '/' -f 1)
apt autoremove -y

log "Installing packages:"${PACKAGES}
apt install -y ${PACKAGES}

log "Copying skel files for root user"
cd "/etc/skel"
for file in $(find . -type f,l); do
    mkdir -p "$(dirname "/root/${file}")"
    cp -df "${file}" "/root/${file}"
    log "$(ls -1 "/root/${file}" || echo "Error copying /root/${file}")"
done
cd "${SCRIPTS_PATH}/configs/base/etc/skel"
for file in $(find . -type f,l); do
    mkdir -p "$(dirname "/root/${file}")"
    cp -df "${file}" "/root/${file}"
    log "$(ls -1 "/root/${file}" || echo "Error copying /root/${file}")"
done
log "Resetting permisions in /root"
mkdir -p /root/.ssh
chown -R root:root /root
find /root -type d -exec chmod 0750 \{\} \;
find /root -type f -exec chmod 0640 \{\} \;
chmod -R go-rwx /root/.ssh

for MODULE in base ${SELECTED_MODULES}; do
    if [[ ! -d "${SCRIPTS_PATH}/configs/${MODULE}" ]]; then
        log "No config for module ${MODULE}"
        continue
    fi
    log "Copying configs for module ${MODULE}"
    cd "${SCRIPTS_PATH}/configs/${MODULE}"
    for file in $(find * -type f,l); do
        mkdir -p "/$(dirname "/${file}")"
        cp -df "${file}" "/${file}"
        set +e
        chmod 644 "/${file}" || true
        set -e
        log "$(ls -1 "/${file}" || echo "Error copying /${file}")"
    done
done

log "Making everything in /usr/local/bin executable"
chmod a+rx /usr/local/bin/*

if [[ -n "$(lspci | grep VGA.*Intel)" ]]; then
    log "Adding i915 to initramfs"
    echo i915 >> /etc/initramfs-tools/modules
fi

# Masive kludge because XFCE's desktop configuration is suboptimal
if is_selected "xfce"; then
    echo '<?xml version="1.0" encoding="UTF-8"?>

<channel name="xfce4-desktop" version="1.0">
  <property name="backdrop" type="empty">
    <property name="screen0" type="empty">' \
        > /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-desktop.xml
    OUTPUTS="$(ls /sys/class/drm | sed -n 's/^card[0-9]*-//p' | sed 's/HDMI-A/HDMI/')"
    for OUTPUT in ${OUTPUTS}; do
        echo '      <property name="monitor'${OUTPUT}'" type="empty">' \
            >> /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-desktop.xml
        for WORKSPACE in {0..15}; do
            echo '        <property name="workspace'${WORKSPACE}'" type="empty">
          <property name="color-style" type="int" value="0"/>
          <property name="image-style" type="int" value="0"/>
          <property name="rgba1" type="array">
            <value type="double" value="0.25"/>
            <value type="double" value="0.25"/>
            <value type="double" value="0.25"/>
            <value type="double" value="1.0"/>
          </property>
        </property>' \
                >> /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-desktop.xml
        done
        echo '      </property>' \
            >> /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-desktop.xml
    done
    echo '    </property>
  </property>
  <property name="desktop-icons" type="empty">
    <property name="file-icons" type="empty">
      <property name="show-trash" type="bool" value="false"/>
      <property name="show-filesystem" type="bool" value="false"/>
      <property name="show-home" type="bool" value="false"/>
      <property name="show-removable" type="bool" value="false"/>
    </property>
    <property name="tooltip-size" type="double" value="256.000000"/>
  </property>
  <property name="last" type="empty">
    <property name="window-width" type="int" value="653"/>
    <property name="window-height" type="int" value="558"/>
  </property>
</channel>' \
        >> /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-desktop.xml
fi

if is_selected "chrome"; then
    cd /tmp
    log "Downloading Google Chrome .deb"
    wget -O /tmp/chrome.deb \
        https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    log "Installing Google Chrome .deb"
    apt install -y /tmp/chrome.deb
fi

if is_selected "gaming"; then
    log "Installing Heroic"
    /usr/local/bin/update-heroic
    for USERDIR in /home/*; do
        log "Adding ${USERNAME} to games group"
        USERNAME=$(basename "${USERDIR}")
        gpasswd -a "${USERNAME}" games
    done
    log "Disabling mitigations"
    sed \
        's/^\(GRUB_CMDLINE_LINUX_DEFAULT=".*\)"/\1 mitigations=off i915.mitigations=off"/' -i \
        /etc/default/grub.d/local.cfg
fi

cd /etc/skel
for USERDIR in /home/*; do
    USERNAME=$(basename "${USERDIR}")
    log "Copying skel files for user ${USERNAME}"
    for file in $(find . -type f,l); do
        mkdir -p "$(dirname "${USERDIR}/${file}")"
        cp -df "${file}" "${USERDIR}/${file}"
        log "$(ls -1 "${USERDIR}/${file}" || echo "Error copying ${USERDIR}/${file}")"
    done
    log "Resetting permissions in ${USERDIR}"
    mkdir -p "${USERDIR}/.ssh"
    chown -R "${USERNAME}":"${USERNAME}" "${USERDIR}"
    find "${USERDIR}" -type d -exec chmod 0750 \{\} \;
    find "${USERDIR}" -type f -exec chmod 0640 \{\} \;
    chmod -R go-rwx "${USERDIR}/.ssh"
done

log "Removing undesirables"
apt purge -y ibus plymouth yelp termit tilix xterm zutty
apt autoremove -y

log "Removing residual configs"
apt purge -y $(dpkg -l | sed -n 's/^rc *\([^ ]*\).*/\1/p')

log "Enable powerline globally"
vim-addons -w install powerline
log "Final grub update"
update-grub
log "Final initramfs update"
update-initramfs -k all -u
cd
rm -rf /tmp/*
